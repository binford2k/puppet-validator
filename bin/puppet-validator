#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'puppet-validator'

gemroot = File.expand_path(File.join(File.dirname(__FILE__), '..'))
options = {
  :port           => 9000,
  :host           => '0.0.0.0',
  :bind           => '0.0.0.0',
  :root           => gemroot,
  :csrf           => false,
  :graph          => false,
  :spec           => '/var/puppet-validator/spec'
}
logfile  = $stderr
loglevel = Logger::WARN
ssl_opts = {:verify_peer => false}

optparse = OptionParser.new { |opts|
    opts.banner = "Usage : puppet-validator [-p <port>] [-l [logfile]] [-t <themedir>] [-d]
         -- Runs the Puppet Validator code validation service.

        puppet-validator init
         -- Copies the files needed to create a puppet-validator theme into $CWD.
            This will overwrite existing files.

"

    opts.on("-d", "--debug", "Display or log debugging messages") do
        loglevel = Logger::DEBUG
    end

    opts.on("--disable DISABLED_CHECKS", "Lint checks to disable. Either comma-separated list or filename.") do |arg|
        puts "Disabling #{arg}"
        options[:disabled_lint_checks] = arg
    end

    opts.on("-l [LOGFILE]", "--logfile [LOGFILE]", "Path to logfile. Defaults to no logging, or /var/log/puppet-validator if no filename is passed.") do |arg|
        logfile = arg || '/var/log/puppet-validator'
    end

    opts.on("-p PORT", "--port", "Port to listen on. Defaults to 9000.") do |arg|
        options[:port] = arg
    end

    opts.on("-t THEMEDIR", "--theme THEMEDIR", "Path to the theme directory.") do |arg|
        options[:root] = arg
    end

    opts.on("-s SPECDIR", "--spec SPECDIR", "Path to the directory where spec tests are located.") do |arg|
        options[:spec] = arg
    end

    opts.on("-x", "--csrf", "Protect from cross site request forgery. Requires code to be submitted for validation via the webpage.") do
        options[:csrf] = true
    end

    opts.on("-g", "--graph", "Generate relationship graphs from validated code. Requires `graphviz` to be installed.") do
        options[:graph] = true
    end

    opts.on("--ssl", "Run with SSL support. Autogenerates a self-signed certificates by default.") do
        options[:ssl] = true
    end

    opts.on("--ssl-cert FILE", "Specify the SSL certificate you'd like use use. Pair with --ssl-key.") do |arg|
        ssl_opts[:cert_chain_file] = arg
    end

    opts.on("--ssl-key FILE", "Specify the SSL key file you'd like use use. Pair with --ssl-cert.") do |arg|
        ssl_opts[:private_key_file] = arg
    end

    opts.separator('')

    opts.on("-h", "--help", "Displays this help") do
        puts
        puts opts
        puts
        exit
    end
}
optparse.parse!

if ARGV.first == 'init'
  puts 'Initializing directory as new puppet-validator theme...'
  unless (Dir.glob '**/*').empty?
    puts '-- Overwriting existing files. Press Ctrl-C to cancel or <Enter> to continue.'
    STDIN.gets
  end

  FileUtils.cp   "#{gemroot}/config.ru", '.'
  FileUtils.cp   "#{gemroot}/LICENSE", '.'
  FileUtils.cp   "#{gemroot}/README.md", '.'
  FileUtils.cp_r "#{gemroot}/public", '.'
  FileUtils.cp_r "#{gemroot}/views", '.'

else
  logger           = Logger.new(logfile)
  logger.level     = loglevel
  options[:logger] = logger

  if ssl_opts[:cert_chain_file] and ssl_opts[:private_key_file]
    options[:ssl] = true
  end

  # These options should either both be nil or both be Strings
  unless ssl_opts[:cert_chain_file].class == ssl_opts[:private_key_file].class
    raise 'You must specify both the certificate and key file!'
  end

  PuppetValidator.run!(options) do |server|
    if options[:ssl]
      if server.respond_to? 'ssl='
        logger.info 'Enabling SSL support.'
        server.ssl         = true
        server.ssl_options = ssl_opts
      else
        logger.warn "Please 'gem install thin' or run via an app server for SSL support."
      end
    end
  end
end
